\section{Concrete Syntax}
\label{concretesyntax}

A good choice of concrete syntax is important for DSLs to be accepted by the
intended user community. Especially (but not exclusively) in business domains, a
DSL will only be successful if and when it uses notations that directly fit the
domain --- there might even be existing, established notations that should be
reused. A good notation makes expression of common concerns simple and concise
and provides sensible defaults. It is acceptable for less common concerns to
require a bit more verbosity in the notation.

There are a couple of major classes for DSL concrete syntax\footnote{Sometimes
form-based GUIs or trees views are considered DSLs. I disagree, because this
would make any GUI application a DSL.}: \emph{Textual} DSLs use linear textual
notations, typically based on ASCII or Unicode characters.
They basically look and feel like traditional programming languages.
\emph{Graphical} DSLs use graphical shapes. An important subgroup is represented
by those that use box-and-line diagrams that look and feel like UML class
diagrams or state machines. However, there are more options for graphical
notations, such as those illustrated by UML timing diagrams or sequence
diagrams. \emph{Symbolic} DSLs are textual DSLs with an extended set of symbols,
such as fraction bars, mathematical symbols or subscript and superscript.
\emph{Tables and Matrices} are a powerful way to represent certain kinds of data
and can play an important part for DSLs.
 
The perfect DSL tool should support freely combining and integrating
the various classes of concrete syntax, and be able to show (aspects of) the
same model in different notations. As a consequence of tool limitations, this is
not always possible, however. The requirements for concrete syntax are a major
driver in tool selection.

\begin{marginfigure}[10\baselineskip]
  \includegraphics[width=3cm]{figures-design/graphicalRel.png}
  \caption{Graphical Notation for Relationships}
  \label{graphicalRel}
\end{marginfigure}



\parhead{When to use which form} We do not want to make this section a complete
discussion between graphical and textual DSLs --- a discussion, that is often
heavily biased by previous experience, prejudice and tool capabilities. Here are
some rules of thumb. Purely textual DSLs integrate very well with existing
development infrastructures, making their adoption relatively easy. They are
very well suited for detailed descriptions, anything that is algorithmic or
generally resembles (traditional) program source code. Symbolic notations can be
considered "better textual", and lend themselves to domains that make heavy use
of symbols and special notations; many scientific and mathematical domains come
to mind. Tables are very useful for collections of similarly structured data
items, or for expressing how two independent dimensions of data relate. Finally,
graphical notations are very good for describing relationships
(\fig{graphicalRel}), flow (\fig{graphicalFlow}) or timing and causal
relationships (\fig{graphicalCause}).

 \begin{marginfigure}[-15\baselineskip]
  \includegraphics[width=4cm]{figures-design/graphicalFlow.png}
  \caption{Graphical Notation for Flow}
  \label{graphicalFlow} 
\end{marginfigure}

\begin{marginfigure}[-3\baselineskip]
  \includegraphics[width=5cm]{figures-design/graphicalCause.png}
  \caption{Graphical Notation for Causality and Timing}
  \label{graphicalCause}
\end{marginfigure}
 
  
\begin{marginfigure}
  \includegraphics[width=5cm]{figures-design/pension/pensionmath.png}
  \caption{Mathematical notations used to express insurance math in the pension
  workbench.}
  \label{pensionmath} 
\end{marginfigure} 

\pension{The pension DSL uses mathematical symbols and notations to express
insurance mathematics (\fig{pensionmath}). A table notation is embedded to
express unit tests for the pension plan calculation rules. A graphical
projection shows dependencies and specialization relationships between plans.}



\embc{The core DSLs use a textual notation with some tabular enhancements, for
example, for decision tables (\fig{dectab}). However, as MPS' capability for
handling graphical notations will improve, we will represent state machines as
diagrams.}

\begin{figure}[h]
\fbox{
\begin{minipage}{105mm}
  \includegraphics[width=\columnwidth]{figures-design/embc/dectab.png}
\end{minipage}
}
  \caption[][35mm]{Decision tables use a tabular notation. It is embedded
  seemlessly into a C program.}
  \label{dectab} 
\end{figure}  
 

\noindent Selection of a concrete syntax is simple for domain user DSLs if there
is an established notation in the domain. The challenge then is to replicate this
notation as closely as possible with the DSL, while cleaning up possible
inconsistencies in the notation (since presumably it had not been used formally
before). I like to use the term "strongly typed word" in this case\sidenote{In
some cases it is useful to come up with a better notation than the one used
historically. This is especially true if the historic notation is Excel.)}.

For DSLs targeted at developers, a textual notation is usually a good starting
point, since developers are used to working with text, and they are very
productive with it. Tree views, and specific visualizations are often useful, to
present outlines, hierarchies or overviews, but not necessarily for editing.
Textual notations also integrate well with existing development infrastructures.

\embc{C is the baseline for embedded systems, and everybody is
familiar with it. A textual notation is useful for many concerns in embedded
systems. Note that several languages create visualizations on the fly, for
example for module dependencies, component dependencies and component instance
wirings. The graphviz tool is used here since it provides decent
auto-layout.}

\noindent There are very few DSLs where a \emph{purely} graphical notation makes
sense because in most cases, some textual languages are embedded in the diagrams or
tables: state machines have expressions embedded the guards and statements in
the actions (\fig{statemachines}); component diagrams use text for
specifications of operations in interfaces, maybe using expressions for
preconditions; block diagrams use a textual syntax for the
implementation/parametrization of the blocks (\fig{blockdiagram}); tables may
embed textual notations in the cells (\fig{yakreq})\marginnote[-10mm]{A text
box where textual code can be entered without language support should only be
used as a last resort. Instead, a textual notation, with additional graphical
visualizations should be used}. Integrating textual languages into graphical
ones is becoming more and more important, and tool support is improving.



\begin{figure}
  \includegraphics[width=10cm]{figures-design/blockdiagram.jpg}
  \caption{A block diagrams built with the Yakindu modeling tools. A textual DSL
  is used to implement the behavior in the blocks. While the textual DSL is
  not technically integrated with the graphical notation (separate viewponts),
  semantic integration is provided.}
  \label{blockdiagram}
\end{figure}


\marginnote[-11mm]{In my consulting practice, I almost always start with a
textual notation and try to stabilize language abstractions. Only then will I engage in
a discussion about whether a graphical notations on top of the textual one is
necessary. Often it is not, and if it is, we have avoided iterating the
implementation of the graphical editor implementation, which, depending on the
tooling, can be a lot of work.} Note that initially, domain users prefer a
graphical notation, because of the perception that things that are described
graphically are simple(r) to comprehend. However, what is most important
regarding comprehensibility is the alignment of the domain concepts with the
abstractions in the language. A well-designed textual notation can go a long
way. Also, textual languages are more productive once the learning curve has
been overcome. I have had several cases where domain users started preferring
textual notations later in the process.


\begin{figure}[h]
  \includegraphics[width=10cm]{figures-design/yakreq.jpg}
  \caption{The Yakindu Requirements tools integrates a textual DSL for formal
  requirements specification into a table view. The textual specifications are
  stored as text in the requirements database; consequently, the entities
  defined textually cannot be referenced (which is not a problem in this
  domain).}
  \label{yakreq}
\end{figure}

\begin{figure}[h]
  \includegraphics[width=10cm]{figures-design/statemachines.png}
  \caption{The Yakindu State Chart Tools support the use of Xtext DSLs in
  actions and guard conditions of state machines, mixing textual and graphical
  notations. The DSL can even be exchanged, to support domain specific action
  languages, for example for integrating with user interface specifications. In
  this case, the textual specification are stored as the AST in terms of EMF,
  not as text. }
  \label{statemachines}
\end{figure} 

\parhead{IDE Supportability} For textual languages, it is important to keep in
mind if and how a syntax can be support by the IDE, especially regarding code
completion. Consider query languages. An example SQL query looks like this:

\begin{lstlisting}[morekeywords={SELECT, FROM, WHERE}]
SELECT field1, field2 FROM aTable WHERE ...
\end{lstlisting}

\noindent When entering this query the IDE cannot provide code completion for
the fields after the \ic{SELECT} because at this point the table has not yet specified. A
more suitable syntax, with respect to IDE support, would be

\begin{lstlisting}[morekeywords={SELECT, FROM, WHERE}]
FROM aTable SELECT field1, field2 WHERE ...
\end{lstlisting}

\noindent because now the IDE can provide support code completion for the fields
based on the table name that has already been entered when you specify the
fields.

SQL is a relatively old language and IDE concerns where probably not very
important at the time. More modern query language such as HQL or Linq in fact
use the more IDE friendly syntax.

Note that tool supportability in general is not fundamentally different in
graphical and textual languages. While IDEs for textual languages can provide
code completion, the palette or the context buttons in a graphical DSL play the
same role. I often hear that a graphical DSL is more suitable for simulation
(because the execution of the program can be animated on the graphical
notation). However, this is only true if the graphical notation works well in
the first place. A textual program can also be animated; a debugger essentially
does just that.


\parhead{Writing vs. Reading Code} Textual notations are more productive for
writing programs. While, in principle, code completion, quick fixes and
refactorings could also be provided for graphical notations, we see them more
often in textual IDEs. In general, for DSLs writability
is often more important than readability, because additional read-only
representations can always be derived automatically.


\parhead{Visualization} A visualization is a graphical representation of a model
that cannot be edited. It is created from the core model using some kind of
transformation, and it is often automatically layouted (possibly with
layouting hints from the user). The resulting diagram may be static (i.e.~an
image file is generated) or interactive (where users can show, hide and focus
on different parts of the diagram). It may provide drill-down back to the core
program (double-clicking on the figure in the image opens the code editor at
the respective location.)\footnote{Graphviz is one of the most well-known tools
for this kind of visualization. Another one is Jan Koehnlein's Generic Graph
View at http://bit.ly/HpW4xV}.

Visualizations are a good way of resolving a potential conflict where the
primary DSL users want to use a textual notations (for reasons of writability)
and other stakeholders still want a graphical representation to get an overview
over the overall model.

Since a visualization is not the primary notation, it is possible to create
several different visualizations for the same model, highlighting different
aspects of the core program.

\embc{In the mbeddr components extension, we support several notations. The
first one shows interfaces and the components that provide and require these
interfaces. The second one shows component instances and the connections
between their provided and required ports. Finally, there is a third
visualization that applies to all mbeddr models, not just those that use
components: it shows the modules, their imports (i.e.~module dependencies) as
well as the public contents of these modules (functions, structs, components,
test cases).}
 
\begin{figure}[h]
  \includegraphics[width=110mm]{figures-design/visuInMPS.png}
  \caption{mbeddr C also supports graphical visualizations of state machines.
  For every state machine, a dot representation is automatically generated. The
  image is then rendered by graphviz directly in the IDE. Double-clicking on a
  state selects the respective program element in the editor.}
  \label{visuInMPS}
\end{figure} 


\marginnote[8mm]{We have the equivalent of multiple notations for the same
language in the real world. English can be spoken, written, transported via morse code or
even expressed via sign language. Each of these is optimized for certain
contexts and audiences.} \parhead{Multiple Notations} For projectional editors
it is possible to define several notations for the same language concept. By
changing the projection rules, existing programs can be shown in a different
way. This removes some of the burden of getting it right initially, because the
notation can be adapted after the fact. In addition, different notations
(possibly showing different concerns of the overall program) can be used for
different stakeholders.


\embc{For state machines, the primary syntax is textual. However, a tabular
notation is supported as well. The projection can be changed as the program is
edited, rendering the same state machine textually or as a table. As
mentioned above, a graphical notation will be added in the future, as MPS'
support for graphical notations improves.}

\cooling{The refrigerator DSL uses graphical visualizations to render diagrams
of the hardware structure, as well as a graphical state charts representing the
underlying state machine.}



\parhead{Relationship to Hierarchical Domains} Domains at low $D$ are most
likely best expressed with a textual or symbolic concrete syntax. Obvious
examples include programming languages at $D_0$. Mathematical expressions, which
are also very dense and algorithmic, use a symbolic notation. As we progress to
higher $D$s, the concepts become more and more abstract, and as state machines
and block diagrams illustrate, graphical notations become useful. However, these
two notations are also a good example of language embedding since both of them
require expressions: state machines in guards and actions (\fig{statemachines}),
and block diagrams as the implementation of blocks (\fig{blockdiagram} and
\fig{mscript}). Reusable expression languages should be embedded into the
graphical notations. In case this is not supported by the tool, viewpoints may
be an option. One viewpoint could use a graphical notation to define
coarse-grained structures, and a second viewpoint uses a textual notation to
provide "implementation details" for the structures defined by the graphical
viewpoint\sidenote[][-2\baselineskip]{Not every tool can support every
(combination of) form of concrete syntax, so this aspect is limited by the tool, or drives tool
selection.}.
 
\embc{As the graphical notation for state machines will become available, the C
expression language that is used in guard conditions for transitions will be
usable as labels on the transition arrows. In the table notation for state
machines, C expressions can be embedded in the cells as well.}


