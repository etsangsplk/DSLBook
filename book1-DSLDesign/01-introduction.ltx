\FloatBarrier
\clearpage

\part{DSL Design}


\chapter{Core Design Dimensions}


This part of the book has been written together with Eelco Visser of TU Delft.
Reach him via \verb#e.visser@tudelft.nl#.

\vspace{1cm} 

 
\chapterabstract{DSLs are languages with high
expressivity for a specific, narrow problem domain. They are a powerful tool for
software engineering, because they can be tailor-made for a specific class of
problems. However, because of the large degree of freedom in designing DSLs, and
because they are supposed to cover the right domain, completely, and at the
right abstraction level, DSL design is also hard. In this chapter we present a
framework for describing and characterizing external domain specific languages.
We identify eight design dimensions that span the space within which DSLs are
designed: expressivity, coverage, semantics, separation of concerns,
completeness, large-scale model structure, language modularization and syntax.
We illustrate the design alternatives along each of these dimensions with
examples from our case studies.}


\newthought{This part of the book} presents a conceptual framework for the
description of DSL design, based on eight dimensions: expressivity, coverage,
semantics and execution, separation of concerns, structuring programs, language
modularity, and concrete syntax. These dimensions provide a vocabulary for
describing and comparing the design of existing DSLs. While the chapter does not
contain a complete methodology for designing new DSLs, the framework does
highlight the options designers should consider. We also describe drivers, or
forces, that lead to using one design alternative over another one.

