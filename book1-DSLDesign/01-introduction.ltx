\FloatBarrier
\clearpage

\part{DSL Design}


\chapter{Core Design Dimensions}


This part of the book has been written together with Eelco Visser of TU Delft.
Reach him via \verb#e.visser@tudelft.nl#.

\vspace{1cm} 

 
\chapterabstract{DSLs are languages with high
expressivity for a specific, narrow problem domain. They are a powerful tool for
software engineering, because they can be tailor-made for a specific class of
problems. However, because of the large degree of freedom in designing DSLs, and
because they are supposed to cover the right domain, completely, and at the
right abstraction level, DSL design is also hard. In this chapter we present a
framework for describing and characterizing external domain specific languages.
We identify eight design dimensions that span the space within which DSLs are
designed: expressivity, coverage, semantics, separation of concerns,
completeness, large-scale model structure, language modularization and syntax.
We illustrate the design alternatives along each of these dimensions with
examples from our case studies.}

In this chapter we highlight aspects of DSL design you should think about when
building a DSL. We identify clearly eight relevant dimensions: expressivity,
coverage, semantics and execution, separation of concerns, structuring programs,
language modularity, and concrete syntax. These dimensions provide a vocabulary
for describing and comparing the design of existing DSLs and help guide the
design of new ones. We also describe drivers, or forces, that lead to using one
design alternative over another one.

This chapter is not a complete methodology. It does not present a recipe that
guarantees a great DSL if followed. I don't believe in methodologies, because
they pretend precision where there isn't any. Building a DSL is a craft. This
means that, while there are certain established approaches and conventions, 
building a good DSL also requires experience and practice. 


