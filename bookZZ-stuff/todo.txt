Design
----------------------------------------------------------
Case Studies: Jan Visualisierung, ISC Achmea, Spray, Youtrack Team? 

Checking constraints, different cost, at different times.

Program == transitive Closure über alle abh. Fragmente


Bei dem List Example: Ordered List verwenden

Linguistic Abstraction:
- Nutzer muss wissen was er will!
  (CC, Fehlermeldungen)
- Sprache wird groß (Modularisierung)

Multi-Stage Trafo: auch wegen der Dom Hierarchie

Do what I want language in Buch; Tradeoff zw. Domänenbreite und Expressivity Action

Lang Extension: 
evolution of DSL - you can easily create more
advanced DSL constructions & modify exisitng code in order to use it, so you
can raise a level of abstraction in DSL or introduce more abstract DSLs ontop
of exisitng later. -> may also help avoid DSL hell, since a lang can be extended 
instead of creating a new one for every new problem



Implementation
----------------------------------------------------------
Checking constraints, different cost, at different times.
Synchronization via auto-running quick fixes.

Formale Methoden: Generiere Testfälle vom Modell automatisch; dann generiere
diese in die Zielwelt (codegen, interpreter) and run them.

testen von ausführbarem code: testet nicht, was neben *auch noch* geht...
... zusätzlich zu dem was gehen soll. (security)








General
------------------------------------------------------------
Clean up "I" and "we".