--------------------------------------------------
GENERAL
--------------------------------------------------
* DONE: avoid textbf in text, use italics instead.
* DONE: URLs in the right margin with sans serif font (icsn).
* DONE: in the bib file, use the double {{ to handle capitalization
* DONE: In Headings (at each level) use The Correct Capitalization.

* should I just use sidenotes isntead of margin notes? The latter are
  not numbered!


* Add a frontmatter with all the legal stuff
* Thank the co-authors in the intro
* Add TOC
* Check that the right margin is ok.
* clean up I and we.
* address remaining \todos
* deconflict all the margin notes
* cross refs
* do we want to use the typographic, curly quotation marks?


Copyediting:
Intro  - Done      & Reworked
Design - 50% Done






Design
----------------------------------------------------------



* Better definition of Language Concept
* Discuss Portability and the problem of implicit assumptions of the target platform
* WeakHashMap as an example for a lib conept for which the compiler/RTsys provide
  special support
* When building a DSL iteratively, and you encounter sth that "destroys everything",
  then maybe keep this out of the DSL and reduce coverage.
* Typsys: instead of reporting an error, a type coercion may automatically be applied
* Optional Typing as an intermediate between inference and intent+check




I vs. we
MarginFigure Alignment



Write more on abstractions in Express Charter

Vielleicht solltest Du noch irgendwo schreiben, dass man auf dem Weg zum Maschinencode nicht jede Stufe von D durchlaufen muss. Man kann auch von D direkt nach D-2 gehen.

Ich sollte irgendwo was zu klassischer Compilerbauerei schreiben. In der Intro.

Provide more detail in the examples; example code?

Tradeoffs between the dimensions?

Viewpoints: explain relationship between "DOmain == set of programs"
and "domain == several concerns". Do we need the term concern-specific DSL?

Bei den Case Studies erwähnen warum sie drin sind.

Case Studies: Jan Visualisierung, ISC Achmea, Spray, Youtrack Team? 

what about dimensions like:
static analyzability, users training/maturity, integration with existing software ? 

Expressivity:
John C. Mitchell, "On abstraction and the expressive power of programming languages", Science of Computer Programming, 1993
Matthias Felleisen, On the expressive power of programming languages,  Science of Computer Programming, 1991


PLE: 
1) kompakte DSL, kleine Variantenprogramme, jedes Mal neuschreiben
2) Sprache ist orthogonal zu drübergelefter pos oder neg Var
3) DSL kann Var direkt ausdrücken (durch Komponenten, Schnittstellen, Vererbung)
4) ggfs. User Defined ABstractions erlauben, damit nicht für jede Var 
   die Sprache geändert werden muss
   
In the modularization part: we seem to need more examples (especially in the
transformation etc.). But these will come in the implementation chapter as well.





Implementation
----------------------------------------------------------
Do we want to have wrap-up for each chapter and compare things?

Checking constraints, different cost, at different times.
Synchronization via auto-running quick fixes.

Formale Methoden: Generiere TestfŠlle vom Modell automatisch; dann generiere
diese in die Zielwelt (codegen, interpreter) and run them.

testen von ausfŸhrbarem code: testet nicht, was neben *auch noch* geht...
... zusŠtzlich zu dem was gehen soll. (security)

IDE services: pretty printers, analyzers, debuggers, diff, merge

Describe somewhere the bootstrapping of MPS? Extend the MPS
base language to make language development simpler?


Generator Testing for Xtext
   https://plus.google.com/116686227162807422131/posts/haT1cuib3Dv
   
   Xtext Debugging


General
------------------------------------------------------------
Clean up "I" and "we".
doesn't, isn't, won't, ....
Einige der "I"s in passiv wandeln
Our

