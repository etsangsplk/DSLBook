Design
----------------------------------------------------------
Case Studies: Jan Visualisierung, ISC Achmea, Spray, Youtrack Team? 

Checking constraints, different cost, at different times.

what about dimensions like:
static analyzability, users training/maturity, integration with existing software ? 

Expressivity:
John C. Mitchell, "On abstraction and the expressive power of programming languages", Science of Computer Programming, 1993
Matthias Felleisen, On the expressive power of programming languages,  Science of Computer Programming, 1991

Do we want to remove the formulas? Or at least provide examples for each?

Du kˆnntest noch etwas in Richtung Freiheitsgrade unterbringen. Mit DSLs schr‰nkt man von die (fast) unendliche Freiheit auf wenige Ausdrucksmˆglichkeiten ein, daf¸r bekommt man leichtere Erlernbarkeit, weniger Fehleranf‰lligkeit, bessere Optimierbarkeit usw. W¸rde in den 2. Absatz passen.

Bei Expressivity: nochmal klar sagen dass auch Wissen ¸ber die Dom‰ne im 
Generator/EE steckt. Hˆrt sich so an, als ob viel Code gut w‰re. Dabei ist es doch so, dass man in einer reife Dom‰ne so viel Semantik in ein oder wenige Elemente packen kann, dass man in einer GPL enorm viel Code br‰uchte, um dieselbe Semantik auszudr¸cken. Daf¸r kann man sonst nix ausdr¸cken, hat also keine Flexibilit‰t mehr. (F¸r mich sind DSLs ja nur daf¸r da, um die ¸brig gebliebene Variabilit‰t zu binden.) Die Semantik, die unver‰nderlich ist f¸r alle Instanzen eines Sprachelements kann fest vor-codiert werden, nur die Variabilit‰t muss noch in der DSL tats‰chlich ausgedr¸ckt werden. 
F‰llt Dir eine gute Art und Weise ein zu beschreiben, wie durch Beschr‰nkung und Abstraktion eine kleinere Sprache entsteht? 
-> Var, Immer gleich

Implementation
----------------------------------------------------------
Checking constraints, different cost, at different times.
Synchronization via auto-running quick fixes.

Formale Methoden: Generiere Testfälle vom Modell automatisch; dann generiere
diese in die Zielwelt (codegen, interpreter) and run them.

testen von ausführbarem code: testet nicht, was neben *auch noch* geht...
... zusätzlich zu dem was gehen soll. (security)

IDE services: pretty printers, analyzers, debuggers, ...






General
------------------------------------------------------------
Clean up "I" and "we".
Einige der "I"s in passiv wandeln
Our

