15/02/2011


- goal: mainly reputation/exposure; it's unlikely we're going to make much money off of it (expected sales: ~1000-5000) and likewise change the world ;)

- openness:
	publish as PDFs to a limited audience/community, publish abstracts (from outline) and/or teaser chapter to everyone in general

- publishers:
	* Look for a publisher later on, when the book's ~75% finished, because of the hassle with publishers (and speaking with them with an almost-finished book in hand should be easier).
	* A well-known publisher (potentially) adds weight to the publication, leading to more exposure.
	* Addison-Wesley might work through Markus' connection with Martin Fowler, probably as long as he doesn't see this as competition.
	* O'Reilly is a good option as well.

- author vs. editorship: We're going to decide at a later point (milestone) depending on the "weight" of the contribution, whether MB's going to be mentioned as editor or as an author.

- contributions by others: Mentioned as "with contributions by Zef H., Krystof Cz., &c.", not full co-authorship since a long list of authors' names is not good for marketing

- runnable code:
	* The examples in book should be actual running code, to make sure that they actually work.
	* If we can & want (i.e., code is finished/mature enough, easily deployed, etc.), we can publish this (e.g. as ZIPs; from a repository is probably less convenient for many of the readers and implies that we'd keep it up-to-date) but we're not going to maintain it since the code's not going to work anyway (on recent versions) in a few years' time.

- styling of source code examples:
	* screenshots is easy (but tedious) and unavoidable for MPS/IDW, but also graphically less-than-satisfactorily
	* for everything but MPS/IDW: something like rtf->tex would be nice, but don't spend too much time on it (a conversion method)! We have to experiment and see a bit
	* for now, to be pragmatic: we start of by copy-pasting in text as verbatim, and are going to look for useful LaTeX packages and conversions/convertors in the meanwhile. E.g., the Mac OS X clipboard actually retains style. Complete generation (i.e., from actual source in our own repository) is quite probably too much hassle (and difficult: how to render styling as part of a CI process?) to make it worth having it (e.g., due to changes in the examples).

- audience: should consist (at least) of:
	[EV] students in a DSL course
	[MV] maybe not err on the side of being too trivial
	Basically: people who already know something about DSLs, but are in a "let's see what the experts say and what skills/tricks I can pick up"-mode.

- size of the book: That's mostly controlled by the #examples. Probably ~ 300 because of #tools targeted and source code/screen shots.


Tasks:
	[MB] 1. look into source code formatting; 2. edit Introduction



16/02/2011

- examples:
	* For Stratego/SDF/Spoofax: use WebDSL as example and extract/refer to small but illustrative snippets from that
	* For Xtext & MPS: create a separate, different (from WebDSL) example
	* For each DSL (or set of -): have ~1-2 pages to illustrate context and purpose

- audience:
	[MV] model-driven community (fed up with UML/EMF/etc.) or compiler-building community (fed up with lex/yacc/etc.)?
	[EV] different background perspectives: compiler | modeling | software developers

- @outline:
	* Limit scope with respect to XML or relationalDBs?: XML(/DBs) purely as serialization formats might be too limiting, but we don't want to give XML/DBs the "full treatment". There are cross-overs between EMF/ATerm/etc. and XML/DBs.
	* First get Introduction right, to ensure that we agree on viewpoints, terminology and such for the rest of the book.

- @semantics discussion:
	* The fact we don't agree, shows there's a real need to treat this topic in the book ;-)
	* Hard (and maybe not so useful) to make this completely formal and rigorous...
		Different levels of definitions/formalisms?: formal definition > interpreter > documentation 

- @deadlines:
	* We want the first 2 chapters done (for some definition of 'done') before May 24 which is the Code Generation Conference @Cambridge
	* Interleave writing of chapters from Part II & III: Part II could benefit from guest authors,
		but Part III is about a moving target (technological advancement) so there's the danger the content becomes outdated.


