\begin{boxedminipage}{\hsize}
\begin{minipage}[t]{.5\hsize}\scriptsize\tt
\begin{webdsl}
entity Post {
  key       :: String (id)
  blog      -> Blog
  urlTitle  :: String 
  title     :: String (searchable)
  content   :: WikiText (searchable)
  public    :: Bool (default=false)
  authors   -> Set<User>
  function isAuthor(): Bool {
    return principal() in authors;
  }
  function mayEdit(): Bool { 
    return isAuthor();
  }
  function mayView(): Bool { 
    return public || mayEdit();
  }
}
\end{webdsl}
\end{minipage}
\begin{minipage}[t]{.5\hsize}\scriptsize\tt
\begin{webdsl}
access control rules
  rule page post(p: Post, title: String) { 
    p.mayView()  
  } 
  rule template newPost(b: Blog) { 
    b.isAuthor() 
  }
section posts
  define page post(p: Post, title: String) {
    title{ output(p.title) }
    bloglayout(p.blog){
      placeholder view { postView(p) }
      postComments(p)
    }
  }
  define permalink(p: Post) {
    navigate post(p, p.urlTitle) { elements }
  }
\end{webdsl}
\end{minipage}
\end{boxedminipage}
  \caption[]{WebDSL is a language for web programming~\cite{Visser07}
  that integrates languages the different concerns of web programming, including
  persistent data modeling (entity), user interface templates (define), access
  control~\cite{GroenewegenV08}, data
  validation~\cite{GroenewegenVisser-SOSYM-2011}, search, and more. The language
  enforces inter-concern consistency checking, providing early detection of
  failures~\cite{HemelGKV11}. The fragment above shows a data model, user
  interface templates, and access control rules for posts in a blogging
  application. WebDSL is implemented with the Spoofax Language
  Workbench~\cite{KatsV10} (\icsn{http://spoofax.org}) and is used in the
  researchr digital library (\icsn{http://researchr.org}). }
  
  \label{webdsl} 